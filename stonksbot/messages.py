# from utils import abbre_numbers, format_decimal
from stonksbot.utils import abbre_numbers, format_decimal

def start_text():
    text = "<b>–ü—Ä–∏—Å—Ç—É–ø–∏–º!</b>\n\n–î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–æ—à–µ–ª—å–∫–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
    return text

def processing_text():
    text = "‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞..."
    return text

def config_text(store, balance):
    if store.system:
        system = "–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞"
    else:
        system = "–°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    if store.mode:
        stop = '—Å—Ç–æ–ø'
    else:
        stop = '—Ç—Ä–µ–π–ª–∏–Ω–≥'
    text = f'–±–∞–ª–∞–Ω—Å:<b>{balance}$</b>\n—Ä–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É <b>{store.risk}</b> –æ—Ç –±–∞–ª–∞–Ω—Å–∞ <b>({round(balance * store.risk, 2)}$)</b>\n—Ç–ø –Ω–∞ —Å–¥–µ–ª–∫—É <b>{store.tp}</b>\n{stop} –Ω–∞ —Å–¥–µ–ª–∫—É <b>{store.stop}%</b>\n–ø–ª–µ—á–æ –Ω–∞ —Å–¥–µ–ª–∫—É {store.leverage}\n<b>{system}</b>'
    return text

def market_text(pnl, roe):
    text = f'<b>üí∏ PnL</b>\n\n<b><i>–î–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–±—ã–ª—è—Ö –∏ —É–±—ã—Ç–∫–∞—Ö –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–º —Å—á–µ—Ç–µ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç</i></b>\n\n<i>PnL: {pnl} USDT ({roe}%)</i>'
    return text

def positions_text(a=[]):
    if a:
        text = f"<b>–°–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π</b>\n\n<b><i>{''.join(a)}</i></b>\n<i>–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <code>/position btcusdt</code></i>"
    else:
        text = f"<b>–°–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π</b>\n\n<b><i>üåö –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π.</i></b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <code>/position btcusdt</code></i>"
    return text

def long_text(a=[]):
    if a:
        text = f"<b>–°–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π</b>\n\n<b><i>{''.join(a)}</i></b>\n<i>–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <code>/position btcusdt</code></i>"
    else:
        text = f"<b>–°–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π</b>\n\n<b><i>üåö –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π.</i></b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <code>/position btcusdt</code></i>"
    return text

def short_text(a=[]):
    if a:
        text = f"<b>–°–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π</b>\n\n<b><i>{''.join(a)}</i></b>\n<i>–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <code>/position btcusdt</code></i>"
    else:
        text = f"<b>–°–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π</b>\n\n<b><i>üåö –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π.</i></b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <code>/position btcusdt</code></i>"
    return text

def position_all_text():
    text = f"<b>–°–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π</b>\n\n<b><i>üåö –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π.</i></b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å " \
           f"–ø–æ–∑–∏—Ü–∏—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <code>/position btcusdt</code></i>"
    return text

def orders_text(a=0, b=0):
    if (a + b) > 0:
        text = f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤</b>\n\n–í—Å–µ: <b>{a + b}</b>\n–¢–µ–∫—É—â–∏–µ: <b>{a}</b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –æ—Ä–¥–µ—Ä–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <code>/orders btcusdt</code></i>'
    else:
        text = f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤</b>\n\n<b><i>üåö –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤.</i></b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –æ—Ä–¥–µ—Ä–∞, ' \
               f'–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <code>/orders btcusdt</code></i>'
    return text

def order_all_text():
    text = f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤</b>\n\n<b><i>üåö –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤.</i></b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –æ—Ä–¥–µ—Ä–∞, ' \
           f'–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <code>/orders btcusdt</code></i>'
    return text

def now_text(a=0):
    if a > 0:
        text = f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤</b>\n\n–í—Å–µ: <b>{a}</b>\n–¢–µ–∫—É—â–∏–µ: <b>{a}</b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –æ—Ä–¥–µ—Ä–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <code>/orders btcusdt</code></i>'
    else:
        text = f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤</b>\n\n<b><i>üåö –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤.</i></b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –æ—Ä–¥–µ—Ä–∞, ' \
               f'–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <code>/orders btcusdt</code></i>'
    return text

def selected_tp_text(store):
    text = f"–û–∫, <b>{store.tp}</b> —Ç–ø –ø—Ä–∏–Ω—è—Ç—ã"
    return text


def error_tp_text():
    text = "–£–∫–∞–∂–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä. <code>/t 1-2-3-4</code>."
    return text

def choose_tp_text():
    text = f"<b>–õ–æ–∫–∞–ª—å–Ω—ã–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç</b>\n\n<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —É—Ä–æ–≤–µ–Ω–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å <code>/tp 1-2-3-4</code></i>"
    return text

def pause_text(store):
    if store.system:
        text = f'<b>–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞</b>'
    else:
        text = f'<b>–°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</b>'
    return text

def mode_text(store):
    if store.mode:
        text = f'–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º <b>—Å—Ç–æ–ø-–ª–æ—Å—Å</b>'
    else: 
        text = f'–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º <b>—Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø</b>'
    return text

def selected_stop_text(store):
    if store.mode:
        text = f"–°—Ç–æ–ø –Ω–∞ —Å–¥–µ–ª–∫—É <b>{store.stop}%</b>"
    else:
        text = f"–¢—Ä–µ–π–ª–∏–Ω–≥ –Ω–∞ —Å–¥–µ–ª–∫—É <b>{store.stop}%</b>"
    return text

def choose_stop_text():
    text = "<b>–õ–æ–∫–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å</b>\n\n<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —É—Ä–æ–≤–µ–Ω—å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å <code>/stop 2.25</code></i>"
    return text

def error_stop_text():
    text = "–£–∫–∞–∂–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç–æ–ø–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä. <code>/s 1.25</code>."
    return text

def choose_risk_text():
    text = f"<b>–õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫</b>\n\n<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —É—Ä–æ–≤–µ–Ω—å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å <code>/risk 0.25</code></i>"
    return text

def selected_risk_text(store, balance):
    text = f"—Ä–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ <b>{store.risk}</b> –æ—Ç –±–∞–ª–∞–Ω—Å–∞ <b>({round(balance * store.risk, 2)}$)</b>"
    return text

def error_risk_text():
    text = "–£–∫–∞–∂–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∏—Å–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä. <code>/r 1.25</code>."
    return text

def error_rate_text():
    text = "–£–∫–∞–∂–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É, –Ω–∞–ø—Ä–∏–º–µ—Ä. <code>/price btcusdt</code>."
    return text

def rate_text(symbol, price_change, price_change_percent, weighted_avg_price, last_price, open_price, high_price, low_price, quote_volume, volume):
    text = f"<b>{symbol.upper()}</b>\n" \
        f"<b>Price:</b> ${format_decimal(last_price)} USD\n" \
        f"<b>1hr Change:</b> ${format_decimal(price_change)} USD\n" \
        f"<b>1hr Change:</b> {format_decimal(price_change_percent)}%\n" \
        f"<b>openPrice:</b> ${format_decimal(open_price)} USD\n" \
        f"<b>highPrice:</b> ${format_decimal(high_price)} USD\n" \
        f"<b>lowPrice:</b> ${format_decimal(low_price)} USD\n" \
        f"<b>Volume:</b> ${abbre_numbers(volume)} USD\n" \
        f"<b>Total Supply:</b> {abbre_numbers(quote_volume)}\n" \
        f"\n<a href='https://coinmarketcap.com/'>üöÄ View on CoinMarketCap</a>"
    return text

def selected_leverage_text(store):
    text = f"–ü–ª–µ—á–æ –Ω–∞ —Å–¥–µ–ª–∫—É <b>{store.leverage}</b>"
    return text

def choose_leverage_text():
    text = "<b>–õ–æ–∫–∞–ª—å–Ω—ã–µ –ø–ª–µ—á–æ</b>\n\n<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–ª–µ—á–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –≤—Å–µ –º–æ–Ω–µ—Ç—ã <code>/leverage 10</code></i>"
    return text

def error_leverage_text():
    text = "–£–∫–∞–∂–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ –ø–ª–µ—á–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä. <code>/leverage 10</code>."
    return text

def positions_text(a_list):
    if a_list:
        text = f"<b>–°–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π</b>\n\n<b><i>{''.join(a_list)}</i></b>\n<i>–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <code>/position btcusdt</code></i>"
    else:
        text = f"<b>–°–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π</b>\n\n<b><i>üåö –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π.</i></b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <code>/position btcusdt</code></i>" 
    return text

def orders_text(a_list, b_list):
    if (a_list + b_list) > 0:
        text = f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤</b>\n\n–í—Å–µ: <b>{a_list + b_list}</b>\n–¢–µ–∫—É—â–∏–µ: <b>{a_list}</b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –æ—Ä–¥–µ—Ä–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <code>/orders btcusdt</code></i>'
    else:
        text = f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤</b>\n\n<b><i>üåö –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤.</i></b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –æ—Ä–¥–µ—Ä–∞, ' \
               f'–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <code>/orders btcusdt</code></i>'
    return text

def now_text(a_list):
    if a_list > 0:
        text = (
            f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤</b>\n\n"
            f"–í—Å–µ: <b>{a_list}</b>\n–¢–µ–∫—É—â–∏–µ: <b>{a_list}</b>\n\n"
            "<i>–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –æ—Ä–¥–µ—Ä–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <code>/orders btcusdt</code></i>"
        )
    else:
        text = (
            "<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤</b>\n\n"
            "<b><i>üåö –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤.</i></b>\n\n"
            "<i>–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –æ—Ä–¥–µ—Ä–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <code>/orders btcusdt</code></i>"
        )
    return text

def long_text(a_list):
    if a_list:
        text = f"<b>–°–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π</b>\n\n<b><i>{''.join(a_list)}</i></b>\n<i>–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <code>/position btcusdt</code></i>"
    else:
        text = f"<b>–°–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π</b>\n\n<b><i>üåö –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π.</i></b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <code>/position btcusdt</code></i>"
    return text

def short_text(a_list):
    if a_list:
        text = f"<b>–°–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π</b>\n\n<b><i>{''.join(a_list)}</i></b>\n<i>–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <code>/position btcusdt</code></i>"
    else:
        text = f"<b>–°–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π</b>\n\n<b><i>üåö –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π.</i></b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <code>/position btcusdt</code></i>"
    return

def get_position_all():
    text = f"<b>–°–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π</b>\n\n<b><i>üåö –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π.</i></b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å " \
           f"–ø–æ–∑–∏—Ü–∏—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <code>/position btcusdt</code></i>"
    return text

def get_order_all():
    text = f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤</b>\n\n<b><i>üåö –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤.</i></b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –æ—Ä–¥–µ—Ä–∞, ' \
           f'–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <code>/orders btcusdt</code></i>'
    return text

def order_text(msg):
    symbol = msg.split(' ')[1]
    text = f'<i>–û—Ç–ª–∏—á–Ω–æ, –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ –ø–æ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä–µ <b>{symbol.upper()}</b> –∑–∞–∫—Ä—ã—Ç—ã!</i>'
    return text

def position_text(msg):
    symbol = msg.split(' ')[1]
    text = f'<i>–û—Ç–ª–∏—á–Ω–æ, –ø–æ–∑–∏—Ü–∏—è –ø–æ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä–µ <b>{symbol.upper()}</b> –∑–∞–∫—Ä—ã—Ç–∞!</i>'
    return